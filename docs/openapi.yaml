openapi: 3.0.3
info:
  title: AgroLink API
  version: 1.0.0
  description: |
    AgroLink connects farmers, buyers, and delivery agents through a unified platform.
    This specification documents the public REST endpoints available from the Flask backend.
servers:
  - url: http://127.0.0.1:5000
    description: Local development server
  - url: https://agrolink-backend-nezp.onrender.com
    description: Production server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ApiError:
      type: object
      properties:
        error:
          type: string
        details:
          type: string
    AuthToken:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [farmer, buyer, delivery_agent, superadmin]
        phone:
          type: string
        is_verified:
          type: boolean
        created_at:
          type: string
          format: date-time
    Location:
      type: object
      properties:
        id:
          type: integer
        label:
          type: string
        address_line:
          type: string
        city:
          type: string
        region:
          type: string
        country:
          type: string
        postal_code:
          type: string
        latitude:
          type: number
        longitude:
          type: number
    CartItem:
      type: object
      properties:
        id:
          type: integer
        product_id:
          type: integer
        quantity:
          type: integer
    OrderItem:
      type: object
      properties:
        id:
          type: integer
        product_id:
          type: integer
        quantity:
          type: integer
        price_at_purchase:
          type: number
          format: float
        weight_per_unit:
          type: number
          format: float
    Order:
      type: object
      properties:
        id:
          type: integer
        buyer_id:
          type: integer
        farmer_id:
          type: integer
        delivery_agent_id:
          type: integer
          nullable: true
        delivery_group_id:
          type: integer
          nullable: true
        shipping_address:
          $ref: '#/components/schemas/Location'
        total_items_amount:
          type: number
          format: float
        delivery_cost:
          type: number
          format: float
        total_price:
          type: number
          format: float
        payment_status:
          type: string
          enum: [pending, initiated, paid, failed, refunded]
        delivery_status:
          type: string
          enum: [processing, assigned, out_for_delivery, delivered, cancelled, returned]
        status:
          type: string
          enum: [draft, placed, cancelled, completed]
        placed_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
paths:
  /auth/register:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password, role]
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                role:
                  type: string
                  enum: [farmer, buyer, delivery_agent]
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /auth/login:
    post:
      summary: Obtain a JWT access token
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/AuthToken'
                  - type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /auth/profile:
    get:
      summary: Retrieve the profile of the authenticated user
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Missing or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/orders:
    get:
      summary: List orders for the authenticated user
      tags: [Orders]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    post:
      summary: Convert the buyer cart into an order
      tags: [Orders]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [shipping_address_id]
              properties:
                shipping_address_id:
                  type: integer
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                type: object
                properties:
                  order:
                    $ref: '#/components/schemas/Order'
                  delivery_quote:
                    type: object
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/orders/{order_id}:
    get:
      summary: Fetch a specific order by ID
      tags: [Orders]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: order_id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Order record
          content:
            application/json:
              schema:
                type: object
                properties:
                  order:
                    $ref: '#/components/schemas/Order'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Order not found
    patch:
      summary: Update delivery or payment status
      tags: [Orders]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: order_id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                delivery_status:
                  type: string
                  enum: [processing, assigned, out_for_delivery, delivered, cancelled, returned]
                payment_status:
                  type: string
                  enum: [pending, initiated, paid, failed, refunded]
                status:
                  type: string
                  enum: [draft, placed, cancelled, completed]
      responses:
        '200':
          description: Order updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  order:
                    $ref: '#/components/schemas/Order'
        '403':
          description: Permission denied
  /api/orders/{order_id}/payment:
    post:
      summary: Start an M-Pesa STK push payment
      tags: [Payments]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: order_id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Payment initiated
          content:
            application/json:
              schema:
                type: object
                properties:
                  payment:
                    type: object
                  mpesa_request:
                    type: object
        '403':
          description: Access denied
  /api/delivery/orders/ready:
    get:
      summary: List paid orders awaiting delivery grouping
      tags: [Delivery]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: region
          schema:
            type: string
          required: false
      responses:
        '200':
          description: Ready orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
  /api/delivery-groups:
    get:
      summary: Retrieve delivery group roster and metrics
      tags: [Delivery]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Groups with assignment summary
          content:
            application/json:
              schema:
                type: object
                properties:
                  delivery_groups:
                    type: array
                    items:
                      type: object
                  agent_summary:
                    type: array
                    items:
                      type: object
    post:
      summary: Create a delivery group and assign orders
      tags: [Delivery]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [region]
              properties:
                region:
                  type: string
                order_ids:
                  type: array
                  items:
                    type: integer
                distance_estimate:
                  type: number
                  format: float
      responses:
        '201':
          description: Group created
  /api/delivery-agents/me/status:
    get:
      summary: Fetch the authenticated delivery agent profile
      tags: [Delivery]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Agent status
    patch:
      summary: Update agent availability or coordinates
      tags: [Delivery]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                is_available:
                  type: boolean
                latitude:
                  type: number
                longitude:
                  type: number
      responses:
        '200':
          description: Agent profile updated
  /api/orders/{order_id}/tracking:
    get:
      summary: Retrieve live tracking information for an order
      tags: [Delivery]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: order_id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Tracking payload
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Access denied
security:
  - bearerAuth: []