"""empty message

Revision ID: 282f1538ed0d
Revises: ee4fd2f9db07
Create Date: 2025-10-30 03:28:25.729467

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '282f1538ed0d'
down_revision = 'ee4fd2f9db07'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('delivery_groups',
    sa.Column('id', sa.BIGINT(), nullable=False),
    sa.Column('group_name', sa.String(length=255), nullable=True),
    sa.Column('region', sa.String(length=255), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('distance_estimate', sa.NUMERIC(precision=10, scale=2), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('roles',
    sa.Column('id', sa.BIGINT(), nullable=False),
    sa.Column('name', sa.Enum('FARMER', 'BUYER', 'DELIVERY_AGENT', 'SUPERADMIN', name='rolename'), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('audit_logs',
    sa.Column('id', sa.BIGINT(), nullable=False),
    sa.Column('user_id', sa.BIGINT(), nullable=True),
    sa.Column('action', sa.String(length=255), nullable=False),
    sa.Column('object_type', sa.String(length=255), nullable=True),
    sa.Column('object_id', sa.BIGINT(), nullable=True),
    sa.Column('meta', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('carts',
    sa.Column('id', sa.BIGINT(), nullable=False),
    sa.Column('buyer_id', sa.BIGINT(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['buyer_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('buyer_id')
    )
    op.create_table('email_verification_tokens',
    sa.Column('id', sa.BIGINT(), nullable=False),
    sa.Column('user_id', sa.BIGINT(), nullable=False),
    sa.Column('token', sa.String(length=255), nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('token')
    )
    op.create_table('locations',
    sa.Column('id', sa.BIGINT(), nullable=False),
    sa.Column('user_id', sa.BIGINT(), nullable=True),
    sa.Column('label', sa.String(length=150), nullable=True),
    sa.Column('address_line', sa.String(length=500), nullable=True),
    sa.Column('city', sa.String(length=200), nullable=True),
    sa.Column('region', sa.String(length=200), nullable=True),
    sa.Column('country', sa.String(length=100), nullable=True),
    sa.Column('postal_code', sa.String(length=50), nullable=True),
    sa.Column('latitude', sa.NUMERIC(precision=10, scale=7), nullable=True),
    sa.Column('longitude', sa.NUMERIC(precision=10, scale=7), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('notifications',
    sa.Column('id', sa.BIGINT(), nullable=False),
    sa.Column('user_id', sa.BIGINT(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.Column('message', sa.Text(), nullable=True),
    sa.Column('is_read', sa.Boolean(), nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('password_reset_tokens',
    sa.Column('id', sa.BIGINT(), nullable=False),
    sa.Column('user_id', sa.BIGINT(), nullable=False),
    sa.Column('token', sa.String(length=255), nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('token')
    )
    op.create_table('delivery_agents',
    sa.Column('id', sa.BIGINT(), nullable=False),
    sa.Column('user_id', sa.BIGINT(), nullable=False),
    sa.Column('vehicle_number', sa.String(length=100), nullable=True),
    sa.Column('vehicle_type', sa.String(length=100), nullable=True),
    sa.Column('phone', sa.String(length=30), nullable=True),
    sa.Column('is_available', sa.Boolean(), nullable=False),
    sa.Column('current_location_id', sa.BIGINT(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['current_location_id'], ['locations.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_table('orders',
    sa.Column('id', sa.BIGINT(), nullable=False),
    sa.Column('buyer_id', sa.BIGINT(), nullable=False),
    sa.Column('farmer_id', sa.BIGINT(), nullable=True),
    sa.Column('delivery_agent_id', sa.BIGINT(), nullable=True),
    sa.Column('delivery_group_id', sa.BIGINT(), nullable=True),
    sa.Column('shipping_address_id', sa.BIGINT(), nullable=True),
    sa.Column('total_items_amount', sa.NUMERIC(precision=12, scale=2), nullable=False),
    sa.Column('delivery_cost', sa.NUMERIC(precision=12, scale=2), nullable=False),
    sa.Column('total_price', sa.NUMERIC(precision=12, scale=2), nullable=False),
    sa.Column('payment_status', sa.Enum('PENDING', 'INITIATED', 'PAID', 'FAILED', 'REFUNDED', name='paymentstatus'), nullable=False),
    sa.Column('delivery_status', sa.Enum('PROCESSING', 'ASSIGNED', 'OUT_FOR_DELIVERY', 'DELIVERED', 'CANCELLED', 'RETURNED', name='orderdeliverystatus'), nullable=False),
    sa.Column('status', sa.Enum('DRAFT', 'PLACED', 'CANCELLED', 'COMPLETED', name='orderstatus'), nullable=False),
    sa.Column('placed_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.CheckConstraint('delivery_cost >= 0', name='check_delivery_cost_positive'),
    sa.CheckConstraint('total_items_amount >= 0', name='check_total_items_positive'),
    sa.CheckConstraint('total_price >= 0', name='check_total_price_positive'),
    sa.ForeignKeyConstraint(['buyer_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['delivery_agent_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['delivery_group_id'], ['delivery_groups.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['farmer_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['shipping_address_id'], ['locations.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('orders', schema=None) as batch_op:
        batch_op.create_index('idx_orders_buyer', ['buyer_id'], unique=False)
        batch_op.create_index('idx_orders_delivery_status', ['delivery_status'], unique=False)
        batch_op.create_index('idx_orders_farmer', ['farmer_id'], unique=False)

    op.create_table('cart_items',
    sa.Column('id', sa.BIGINT(), nullable=False),
    sa.Column('cart_id', sa.BIGINT(), nullable=False),
    sa.Column('product_id', sa.BIGINT(), nullable=False),
    sa.Column('quantity', sa.BIGINT(), nullable=False),
    sa.Column('added_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.CheckConstraint('quantity > 0', name='check_cart_quantity_positive'),
    sa.ForeignKeyConstraint(['cart_id'], ['carts.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('cart_id', 'product_id', name='unique_cart_product')
    )
    op.create_table('delivery_assignments',
    sa.Column('id', sa.BIGINT(), nullable=False),
    sa.Column('delivery_group_id', sa.BIGINT(), nullable=True),
    sa.Column('order_id', sa.BIGINT(), nullable=False),
    sa.Column('agent_id', sa.BIGINT(), nullable=True),
    sa.Column('assigned_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('status', sa.Enum('ASSIGNED', 'PICKED_UP', 'IN_TRANSIT', 'DELIVERED', 'FAILED', name='deliveryassignmentstatus'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['agent_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['delivery_group_id'], ['delivery_groups.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('favorites',
    sa.Column('id', sa.BIGINT(), nullable=False),
    sa.Column('buyer_id', sa.BIGINT(), nullable=False),
    sa.Column('product_id', sa.BIGINT(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['buyer_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('buyer_id', 'product_id', name='unique_buyer_product_favorite')
    )
    op.create_table('message_rooms',
    sa.Column('id', sa.BIGINT(), nullable=False),
    sa.Column('order_id', sa.BIGINT(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('order_items',
    sa.Column('id', sa.BIGINT(), nullable=False),
    sa.Column('order_id', sa.BIGINT(), nullable=False),
    sa.Column('product_id', sa.BIGINT(), nullable=True),
    sa.Column('quantity', sa.BIGINT(), nullable=False),
    sa.Column('price_at_purchase', sa.NUMERIC(precision=12, scale=2), nullable=False),
    sa.Column('weight_per_unit', sa.NUMERIC(precision=10, scale=3), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.CheckConstraint('price_at_purchase >= 0', name='check_price_at_purchase_positive'),
    sa.CheckConstraint('quantity > 0', name='check_order_quantity_positive'),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('payments',
    sa.Column('id', sa.BIGINT(), nullable=False),
    sa.Column('order_id', sa.BIGINT(), nullable=False),
    sa.Column('amount', sa.NUMERIC(precision=12, scale=2), nullable=False),
    sa.Column('method', sa.String(length=50), nullable=False),
    sa.Column('transaction_id', sa.String(length=255), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'INITIATED', 'PAID', 'FAILED', 'REFUNDED', name='paymentstatus'), nullable=False),
    sa.Column('initiated_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.CheckConstraint('amount >= 0', name='check_payment_amount_positive'),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('transaction_id')
    )
    op.create_table('product_images',
    sa.Column('id', sa.BIGINT(), nullable=False),
    sa.Column('product_id', sa.BIGINT(), nullable=False),
    sa.Column('image_uri', sa.Text(), nullable=False),
    sa.Column('alt_text', sa.String(length=255), nullable=True),
    sa.Column('is_primary', sa.Boolean(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('reviews',
    sa.Column('id', sa.BIGINT(), nullable=False),
    sa.Column('reviewer_id', sa.BIGINT(), nullable=False),
    sa.Column('reviewed_user_id', sa.BIGINT(), nullable=False),
    sa.Column('product_id', sa.BIGINT(), nullable=True),
    sa.Column('rating', sa.SmallInteger(), nullable=False),
    sa.Column('comment', sa.Text(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.CheckConstraint('rating BETWEEN 1 AND 5', name='check_rating_range'),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['reviewed_user_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['reviewer_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('reviewer_id', 'product_id', name='one_review_per_reviewer_product')
    )
    op.create_table('messages',
    sa.Column('id', sa.BIGINT(), nullable=False),
    sa.Column('room_id', sa.BIGINT(), nullable=False),
    sa.Column('sender_id', sa.BIGINT(), nullable=False),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('channel', sa.Enum('DIRECT', 'ORDER_ROOM', name='messagechannel'), nullable=False),
    sa.Column('metadata_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['room_id'], ['message_rooms.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['sender_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('mpesa_callbacks',
    sa.Column('id', sa.BIGINT(), nullable=False),
    sa.Column('payment_id', sa.BIGINT(), nullable=True),
    sa.Column('payload', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('received_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['payment_id'], ['payments.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('room_participants',
    sa.Column('id', sa.BIGINT(), nullable=False),
    sa.Column('room_id', sa.BIGINT(), nullable=False),
    sa.Column('user_id', sa.BIGINT(), nullable=False),
    sa.Column('joined_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['room_id'], ['message_rooms.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('room_id', 'user_id', name='unique_room_participant')
    )
    op.drop_table('cart')
    with op.batch_alter_table('products', schema=None) as batch_op:
        batch_op.add_column(sa.Column('unit', sa.String(length=50), nullable=True))
        batch_op.add_column(sa.Column('weight_per_unit', sa.NUMERIC(precision=10, scale=3), nullable=True))
        batch_op.add_column(sa.Column('location_id', sa.BIGINT(), nullable=True))
        batch_op.add_column(sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), nullable=True))
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True)
        batch_op.alter_column('farmer_id',
               existing_type=sa.INTEGER(),
               type_=sa.BIGINT(),
               existing_nullable=False)
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=150),
               type_=sa.String(length=255),
               existing_nullable=False)
        batch_op.alter_column('category',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=150),
               existing_nullable=True)
        batch_op.alter_column('price',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               type_=sa.NUMERIC(precision=12, scale=2),
               existing_nullable=False)
        batch_op.alter_column('quantity',
               existing_type=sa.INTEGER(),
               type_=sa.BIGINT(),
               existing_nullable=False)
        batch_op.alter_column('is_available',
               existing_type=sa.BOOLEAN(),
               nullable=False)
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
        batch_op.create_index('idx_products_category', ['category'], unique=False)
        batch_op.create_index('idx_products_farmer', ['farmer_id'], unique=False)
        batch_op.create_index('idx_products_name', ['name'], unique=False)
        batch_op.drop_constraint('products_farmer_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'users', ['farmer_id'], ['id'], ondelete='CASCADE')
        batch_op.create_foreign_key(None, 'locations', ['location_id'], ['id'], ondelete='SET NULL')
        batch_op.drop_column('location')
        batch_op.drop_column('image_uri')

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('role_id', sa.BIGINT(), nullable=False))
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('users_id_seq'::regclass)"))
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=200),
               nullable=True)
        batch_op.alter_column('email',
               existing_type=sa.VARCHAR(length=150),
               type_=sa.String(length=255),
               existing_nullable=False)
        batch_op.alter_column('password_hash',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=512),
               existing_nullable=False)
        batch_op.alter_column('phone',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=30),
               existing_nullable=True)
        batch_op.alter_column('is_verified',
               existing_type=sa.BOOLEAN(),
               nullable=False)
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
        batch_op.drop_constraint('users_verification_token_key', type_='unique')
        batch_op.create_foreign_key(None, 'roles', ['role_id'], ['id'])
        batch_op.drop_column('verification_token')
        batch_op.drop_column('role')
        batch_op.drop_column('location')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('location', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('role', sa.VARCHAR(length=20), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('verification_token', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_unique_constraint('users_verification_token_key', ['verification_token'], postgresql_nulls_not_distinct=False)
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True)
        batch_op.alter_column('is_verified',
               existing_type=sa.BOOLEAN(),
               nullable=True)
        batch_op.alter_column('phone',
               existing_type=sa.String(length=30),
               type_=sa.VARCHAR(length=20),
               existing_nullable=True)
        batch_op.alter_column('password_hash',
               existing_type=sa.String(length=512),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
        batch_op.alter_column('email',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=150),
               existing_nullable=False)
        batch_op.alter_column('name',
               existing_type=sa.String(length=200),
               type_=sa.VARCHAR(length=100),
               nullable=False)
        batch_op.alter_column('id',
               existing_type=sa.BIGINT(),
               type_=sa.INTEGER(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text("nextval('users_id_seq'::regclass)"))
        batch_op.drop_column('role_id')

    with op.batch_alter_table('products', schema=None) as batch_op:
        batch_op.add_column(sa.Column('image_uri', sa.TEXT(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('location', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('products_farmer_id_fkey', 'users', ['farmer_id'], ['id'])
        batch_op.drop_index('idx_products_name')
        batch_op.drop_index('idx_products_farmer')
        batch_op.drop_index('idx_products_category')
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True)
        batch_op.alter_column('is_available',
               existing_type=sa.BOOLEAN(),
               nullable=True)
        batch_op.alter_column('quantity',
               existing_type=sa.BIGINT(),
               type_=sa.INTEGER(),
               existing_nullable=False)
        batch_op.alter_column('price',
               existing_type=sa.NUMERIC(precision=12, scale=2),
               type_=sa.NUMERIC(precision=10, scale=2),
               existing_nullable=False)
        batch_op.alter_column('category',
               existing_type=sa.String(length=150),
               type_=sa.VARCHAR(length=100),
               existing_nullable=True)
        batch_op.alter_column('name',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=150),
               existing_nullable=False)
        batch_op.alter_column('farmer_id',
               existing_type=sa.BIGINT(),
               type_=sa.INTEGER(),
               existing_nullable=False)
        batch_op.alter_column('id',
               existing_type=sa.BIGINT(),
               type_=sa.INTEGER(),
               existing_nullable=False,
               autoincrement=True)
        batch_op.drop_column('updated_at')
        batch_op.drop_column('location_id')
        batch_op.drop_column('weight_per_unit')
        batch_op.drop_column('unit')

    op.create_table('cart',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('buyer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('product_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['buyer_id'], ['users.id'], name='cart_buyer_id_fkey'),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name='cart_product_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='cart_pkey')
    )
    op.drop_table('room_participants')
    op.drop_table('mpesa_callbacks')
    op.drop_table('messages')
    op.drop_table('reviews')
    op.drop_table('product_images')
    op.drop_table('payments')
    op.drop_table('order_items')
    op.drop_table('message_rooms')
    op.drop_table('favorites')
    op.drop_table('delivery_assignments')
    op.drop_table('cart_items')
    with op.batch_alter_table('orders', schema=None) as batch_op:
        batch_op.drop_index('idx_orders_farmer')
        batch_op.drop_index('idx_orders_delivery_status')
        batch_op.drop_index('idx_orders_buyer')

    op.drop_table('orders')
    op.drop_table('delivery_agents')
    op.drop_table('password_reset_tokens')
    op.drop_table('notifications')
    op.drop_table('locations')
    op.drop_table('email_verification_tokens')
    op.drop_table('carts')
    op.drop_table('audit_logs')
    op.drop_table('roles')
    op.drop_table('delivery_groups')
    # ### end Alembic commands ###
